name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # ===== TESTING =====
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio flake8 mypy black
      working-directory: negotiation-simulator

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      working-directory: negotiation-simulator

    - name: Format check with black
      run: black --check .
      working-directory: negotiation-simulator

    - name: Type checking with mypy
      run: mypy . --ignore-missing-imports
      working-directory: negotiation-simulator

    - name: Run tests with coverage
      run: |
        pytest -m "not slow" tests/ -v --cov=. --cov-report=xml --cov-report=html
      working-directory: negotiation-simulator

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: negotiation-simulator/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ===== SLOW TESTS =====
  slow-tests:
    name: Slow Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
      working-directory: negotiation-simulator

    - name: Run slow test suite
      run: pytest tests/performance -v -m slow
      working-directory: negotiation-simulator

  # ===== BENCHMARKING =====
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install memory_profiler psutil
      working-directory: negotiation-simulator

    - name: Run benchmarks
      run: |
        python benchmarking.py
      working-directory: negotiation-simulator

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: negotiation-simulator/benchmarks/

    - name: Comment PR with benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('negotiation-simulator/benchmarks/benchmark_report.txt', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## Benchmark Results\n```\n' + report + '\n```'
          });

  # ===== SECURITY SCANNING =====
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  # ===== DOCKER BUILD =====
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/negotiation-simulator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: negotiation-simulator
        file: negotiation-simulator/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== DOCUMENTATION =====
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        pip install -r requirements.txt
      working-directory: negotiation-simulator

    - name: Build documentation
      run: |
        if [ -d docs ]; then \
          cd docs && make html; \
        else \
          echo "Docs directory missing, skipping"; \
        fi
      working-directory: negotiation-simulator

    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && hashFiles('negotiation-simulator/docs/**') != ''
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # ===== RELEASE =====
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        pip install build twine
      working-directory: negotiation-simulator

    - name: Build package
      run: python -m build
      working-directory: negotiation-simulator

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Create GitHub Release Assets
      run: |
        zip -r negotiation-simulator-${{ github.event.release.tag_name }}.zip . -x ".git/*" -x "__pycache__/*"
        tar -czf negotiation-simulator-${{ github.event.release.tag_name }}.tar.gz --exclude=.git --exclude=__pycache__ .

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./negotiation-simulator-${{ github.event.release.tag_name }}.zip
        asset_name: negotiation-simulator-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  # ===== DEPLOYMENT =====
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes cluster..."
        # kubectl apply -f k8s/

    - name: Deploy to AWS
      run: |
        echo "Deploying to AWS..."
        # aws ecs update-service --cluster negotiation --service negotiation-api --force-new-deployment

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # curl https://api.negotiation-sim.ai/health

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Deployment to production completed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
